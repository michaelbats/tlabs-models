import { createSchema, Type, typedModel, ExtractProps } from 'ts-mongoose';
import { SiteSchema } from './site.models';

const ScheduleOfRatesSchema = createSchema({
  _id: Type.string({ required: true }),
  title: Type.string({ required: true }),
  normalHourse: Type.optionalNumber({ default: 0 }),
  weekend: Type.optionalNumber({ default: 0 }),
  duration: Type.optionalNumber({ default: 0 }),
  internalProcedure: Type.optionalString(),
  description: Type.optionalString(),
  reqSqills: Type.optionalArray().of(Type.string()),
  teamsAppointmentType: Type.optionalString(),
  teamsSurveyType: Type.optionalString(),
  teamsPropertyType: Type.optionalString(),
  teamsDistanceBand: Type.optionalString(),
  numberOfPumps: Type.optionalNumber(),
  teamsAirTestType: Type.optionalString(),
  elements: Type.optionalArray().of(Type.string()),
  reference: Type.optionalNumber()
});

const ElementSchema = createSchema({
  _id: Type.string({ required: true }),
  name: Type.string({ required: true }),
  description: Type.string({ required: true }),
  duration: Type.number({ required: true, default: 0 }),
  price: Type.number({ required: true, default: 0 }),
  priceWeekend: Type.number({ required: true, default: 0 }),
  reference: Type.number({ required: true })
});

const ClientSchema = createSchema({
  _id: Type.string({ required: true }),
  TLAccount: Type.optionalString(),
  TLAdmin: Type.optionalString(),
  TLTechnical: Type.optionalString(),
  accountLimit: Type.optionalNumber(),
  accountStatus: Type.optionalString(),
  accountType: Type.optionalString(),
  address1: Type.optionalString(),
  agreedScheduleRates: Type.optionalBoolean(),
  autoGeneratedReportName: Type.optionalBoolean(),
  autoGenerateUprn: Type.optionalBoolean(),
  city: Type.optionalString(),
  county: Type.optionalString(),
  createdAt: Type.optionalString(),
  files: Type.optionalArray().of(
    Type.object().of({
      fileId: Type.string({ required: true }),
      fileName: Type.string({ required: true }),
      fileUrl: Type.string({ required: true }),
      hideFromEngineer: Type.boolean({ required: true })
    })
  ),
  googleFolder: Type.optionalObject().of({
    id: Type.string({ required: true }),
    name: Type.string({ required: true }),
    url: Type.string({ required: true })
  }),
  hasOwnScheduleOfRates: Type.optionalBoolean(),
  isContractor: Type.optionalBoolean(),
  name: Type.optionalString(),
  notes: Type.optionalString(),
  ownerId: Type.optionalString(),
  postcode: Type.optionalString(),
  reportEmail: Type.optionalObject().of({
    body: Type.string({ required: true }),
    subject: Type.string({ required: true }),
    subjectUrgent: Type.string({ required: true })
  }),
  sageReference: Type.optionalString(),
  scheduleOfRates: Type.optionalArray().of(
    Type.schema().of(ScheduleOfRatesSchema)
  ),
  sector: Type.optionalString(),
  sites: Type.optionalArray().of(Type.schema().of(SiteSchema)),
  tags: Type.optionalArray().of(Type.string()),
  teamsId: Type.optionalString(),
  telephone: Type.optionalString()
});

export const Client = typedModel('clients', ClientSchema);
export type IClient = ExtractProps<typeof ClientSchema>;
export type IElement = ExtractProps<typeof ElementSchema>;
