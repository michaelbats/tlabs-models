/// <reference types="mongoose" />
import { ExtractProps } from 'ts-mongoose';
declare const ResidentSchema: import("mongoose").Schema<any> & {
    definition: import("ts-mongoose").ConvertObject<{
        ResidentObject: {
            isVoid: string;
            name: string | null | undefined;
            email: string | null | undefined;
            phone: string | null | undefined;
            details: <T extends readonly string[]>(options?: (Pick<import("mongoose").SchemaTypeOpts<string>, string | number> & {
                enum?: T | undefined;
            }) | undefined) => import("ts-mongoose").EnumOrString<T> | null | undefined;
        };
    }>;
    options: import("mongoose").SchemaOptions;
};
declare const OrderSchema: import("mongoose").Schema<any> & {
    definition: import("ts-mongoose").ConvertObject<{
        _id: string;
        status: string;
        clientId: string;
        createdAt: Date | null | undefined;
        updatedAt: Date | null | undefined;
        createdBy: string | null | undefined;
        updatedBy: string | null | undefined;
        site: import("ts-mongoose").ConvertObject<{
            _id: string | null | undefined;
            clientId: string | null | undefined;
            autoGenerated: boolean | null | undefined;
            title: string | null | undefined;
            UPRN: string;
            UPRNLabel: string;
            postcode: string;
            addressLine1: string;
            city: string;
            county: string;
            mandatoryInduction: boolean;
            createdAt: Date | null | undefined;
            teamsId: string | null | undefined;
        }>;
        survey: import("ts-mongoose").ConvertObject<{
            scheduleId: string;
            property: import("ts-mongoose").ConvertObject<{
                type: string;
                totalFloors: number;
                allProperty: import("ts-mongoose").ConvertObject<{
                    flooring: import("ts-mongoose").ConvertObject<{
                        survey: boolean;
                        details: string | null | undefined;
                    }>;
                    windows: import("ts-mongoose").ConvertObject<{
                        survey: boolean;
                        details: string | null | undefined;
                    }>;
                    heating: import("ts-mongoose").ConvertObject<{
                        survey: boolean;
                        details: string | null | undefined;
                    }>;
                    roof: import("ts-mongoose").ConvertObject<{
                        survey: boolean;
                        details: string | null | undefined;
                    }>;
                    ceiling: import("ts-mongoose").ConvertObject<{
                        survey: boolean;
                        details: string | null | undefined;
                    }>;
                    externalWalls: import("ts-mongoose").ConvertObject<{
                        survey: boolean;
                        details: string | null | undefined;
                    }>;
                    intercom: import("ts-mongoose").ConvertObject<{
                        survey: boolean;
                        details: string | null | undefined;
                    }>;
                    rewire: import("ts-mongoose").ConvertObject<{
                        survey: boolean;
                        details: string | null | undefined;
                    }>;
                }>;
                utilities: import("ts-mongoose").ConvertObject<{
                    boiler: import("ts-mongoose").ConvertObject<{
                        survey: boolean;
                        details: string | null | undefined;
                    }>;
                }>;
                kitchen: import("ts-mongoose").ConvertObject<{
                    furniture: import("ts-mongoose").ConvertObject<{
                        survey: boolean;
                        details: string | null | undefined;
                    }>;
                    flooring: import("ts-mongoose").ConvertObject<{
                        survey: boolean;
                        details: string | null | undefined;
                    }>;
                    detectors: import("ts-mongoose").ConvertObject<{
                        survey: boolean;
                        details: string | null | undefined;
                    }>;
                    windows: import("ts-mongoose").ConvertObject<{
                        survey: boolean;
                        details: string | null | undefined;
                    }>;
                    ceiling: import("ts-mongoose").ConvertObject<{
                        survey: boolean;
                        details: string | null | undefined;
                    }>;
                }>;
                bathroom: import("ts-mongoose").ConvertObject<{
                    toilet: import("ts-mongoose").ConvertObject<{
                        survey: boolean;
                        details: string | null | undefined;
                    }>;
                    tiles: import("ts-mongoose").ConvertObject<{
                        survey: boolean;
                        details: string | null | undefined;
                    }>;
                }>;
            }> | null | undefined;
        }> | null | undefined;
        resident: import("ts-mongoose").ConvertObject<{
            isVoid: string;
            name: string | null | undefined;
            email: string | null | undefined;
            phone: string | null | undefined;
            details: <T extends readonly string[]>(options?: (Pick<import("mongoose").SchemaTypeOpts<string>, string | number> & {
                enum?: T | undefined;
            }) | undefined) => import("ts-mongoose").EnumOrString<T> | null | undefined;
        }> | null | undefined;
    }>;
    options: import("mongoose").SchemaOptions;
};
export declare const Order: import("mongoose").Model<import("mongoose").Document & {
    _id: string;
    clientId: string;
    status: string;
    site: import("ts-mongoose").ConvertObject<{
        _id: string | null | undefined;
        clientId: string | null | undefined;
        autoGenerated: boolean | null | undefined;
        title: string | null | undefined;
        UPRN: string;
        UPRNLabel: string;
        postcode: string;
        addressLine1: string;
        city: string;
        county: string;
        mandatoryInduction: boolean;
        createdAt: Date | null | undefined;
        teamsId: string | null | undefined;
    }>;
} & {
    createdAt?: Date | null | undefined;
    updatedAt?: Date | null | undefined;
    createdBy?: string | null | undefined;
    updatedBy?: string | null | undefined;
    survey?: import("ts-mongoose").ConvertObject<{
        scheduleId: string;
        property: import("ts-mongoose").ConvertObject<{
            type: string;
            totalFloors: number;
            allProperty: import("ts-mongoose").ConvertObject<{
                flooring: import("ts-mongoose").ConvertObject<{
                    survey: boolean;
                    details: string | null | undefined;
                }>;
                windows: import("ts-mongoose").ConvertObject<{
                    survey: boolean;
                    details: string | null | undefined;
                }>;
                heating: import("ts-mongoose").ConvertObject<{
                    survey: boolean;
                    details: string | null | undefined;
                }>;
                roof: import("ts-mongoose").ConvertObject<{
                    survey: boolean;
                    details: string | null | undefined;
                }>;
                ceiling: import("ts-mongoose").ConvertObject<{
                    survey: boolean;
                    details: string | null | undefined;
                }>;
                externalWalls: import("ts-mongoose").ConvertObject<{
                    survey: boolean;
                    details: string | null | undefined;
                }>;
                intercom: import("ts-mongoose").ConvertObject<{
                    survey: boolean;
                    details: string | null | undefined;
                }>;
                rewire: import("ts-mongoose").ConvertObject<{
                    survey: boolean;
                    details: string | null | undefined;
                }>;
            }>;
            utilities: import("ts-mongoose").ConvertObject<{
                boiler: import("ts-mongoose").ConvertObject<{
                    survey: boolean;
                    details: string | null | undefined;
                }>;
            }>;
            kitchen: import("ts-mongoose").ConvertObject<{
                furniture: import("ts-mongoose").ConvertObject<{
                    survey: boolean;
                    details: string | null | undefined;
                }>;
                flooring: import("ts-mongoose").ConvertObject<{
                    survey: boolean;
                    details: string | null | undefined;
                }>;
                detectors: import("ts-mongoose").ConvertObject<{
                    survey: boolean;
                    details: string | null | undefined;
                }>;
                windows: import("ts-mongoose").ConvertObject<{
                    survey: boolean;
                    details: string | null | undefined;
                }>;
                ceiling: import("ts-mongoose").ConvertObject<{
                    survey: boolean;
                    details: string | null | undefined;
                }>;
            }>;
            bathroom: import("ts-mongoose").ConvertObject<{
                toilet: import("ts-mongoose").ConvertObject<{
                    survey: boolean;
                    details: string | null | undefined;
                }>;
                tiles: import("ts-mongoose").ConvertObject<{
                    survey: boolean;
                    details: string | null | undefined;
                }>;
            }>;
        }> | null | undefined;
    }> | null | undefined;
    resident?: import("ts-mongoose").ConvertObject<{
        isVoid: string;
        name: string | null | undefined;
        email: string | null | undefined;
        phone: string | null | undefined;
        details: <T extends readonly string[]>(options?: (Pick<import("mongoose").SchemaTypeOpts<string>, string | number> & {
            enum?: T | undefined;
        }) | undefined) => import("ts-mongoose").EnumOrString<T> | null | undefined;
    }> | null | undefined;
}, {}>;
export declare type IOrder = ExtractProps<typeof OrderSchema>;
export declare type IOrderResident = ExtractProps<typeof ResidentSchema>;
export {};
