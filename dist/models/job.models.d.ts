/// <reference types="mongoose" />
import { ExtractProps } from 'ts-mongoose';
declare const JobSchema: import("mongoose").Schema<any> & {
    definition: import("ts-mongoose").ConvertObject<{
        _id: {
            of<T>(schema: T): import("ts-mongoose").ConvertObject<T> | null | undefined;
        };
        title: string;
        reference: number;
        batchId: string;
        batchName: string;
        projectId: string;
        projectName: string;
        clientId: string;
        clientName: string;
        status: "Not Booked" | "Booked" | "Finished";
        isOnHold: boolean;
        onHoldReason: string | null | undefined;
        onHoldDetails: string | null | undefined;
        onHoldDate: Date | null | undefined;
        lowerLimit: Date | null | undefined;
        higherLimit: Date | null | undefined;
        deletionRequestedBy: string | null | undefined;
        site: import("ts-mongoose").ConvertObject<{
            _id: string | null | undefined;
            clientId: string | null | undefined;
            autoGenerated: boolean | null | undefined;
            title: string | null | undefined;
            UPRN: string;
            UPRNLabel: string;
            postcode: string;
            addressLine1: string;
            city: string;
            county: string;
            mandatoryInduction: boolean;
            createdAt: Date | null | undefined;
            teamsId: string | null | undefined;
        }>;
        contact: import("ts-mongoose").ConvertObject<{
            name: string | null | undefined;
            phone: string | null | undefined;
            mobile: string | null | undefined;
            alternative: string | null | undefined;
            email: string | null | undefined;
        }>;
        notes: string | null | undefined;
        engineerNote: string | null | undefined;
        purchaseOrder: string | null | undefined;
        twoMen: boolean;
        sendReport: boolean;
        work: import("ts-mongoose").ConvertObject<{
            likelihood: "Certain/Guaranteed" | "Likely" | "Possible" | "Unlikely";
            nextAvailableSlot: boolean | null | undefined;
            start: Date | null | undefined;
            end: Date | null | undefined;
            assignedOperatives: number | null | undefined;
            preferredStaff: string[] | null | undefined;
            staffArray: {
                of<T>(schema: T): import("ts-mongoose").ConvertObject<T>;
            }[] | null | undefined;
            tlProjectManager: string | null | undefined;
            tlAdminContact: string | null | undefined;
            clientProjectManager: string | null | undefined;
            clientSiteContact: string | null | undefined;
            projectManagerTel: string | null | undefined;
            siteContactTel: string | null | undefined;
            notes: string | null | undefined;
            workType: import("ts-mongoose").ConvertObject<{
                TLtype: string;
                quoteRate: number;
                quantity: number;
                requirements: import("ts-mongoose").ConvertObject<{
                    reqId: string;
                    quantity: number;
                    clientCost: number;
                    externalCost: number;
                }>[] | null | undefined;
                elements: string[] | null | undefined;
            }>;
            completed: boolean;
        }>;
        requirements: import("ts-mongoose").ConvertObject<{
            reqId: string;
            quantity: number;
            clientCost: number;
            externalCost: number;
        }>[] | null | undefined;
        failure: import("ts-mongoose").ConvertObject<{
            reason: "No Answer" | "Call Rejected By Contact" | "Wrong Number" | "Contact Unavailable" | "Callback Requested";
            notes: string | null | undefined;
        }> | null | undefined;
        workflow: import("ts-mongoose").ConvertObject<{
            presite: import("ts-mongoose").ConvertObject<{
                numberOfDays: number | null | undefined;
                steps: undefined[] | null[] | import("ts-mongoose").ConvertObject<{
                    type: import("ts-mongoose").ConvertObject<{
                        action: string | null | undefined;
                        percentage: number | null | undefined;
                        delay: number | null | undefined;
                        associatedRole: string | null | undefined;
                    }> | null | undefined;
                    label: string | null | undefined;
                }>[] | null | undefined;
            }> | null | undefined;
            site: import("ts-mongoose").ConvertObject<{
                numberOfDays: number | null | undefined;
                steps: undefined[] | null[] | import("ts-mongoose").ConvertObject<{
                    type: import("ts-mongoose").ConvertObject<{
                        action: string | null | undefined;
                        percentage: number | null | undefined;
                        delay: number | null | undefined;
                        associatedRole: string | null | undefined;
                    }> | null | undefined;
                    label: string | null | undefined;
                }>[] | null | undefined;
            }> | null | undefined;
            postsite: import("ts-mongoose").ConvertObject<{
                numberOfDays: number | null | undefined;
                steps: undefined[] | null[] | import("ts-mongoose").ConvertObject<{
                    type: import("ts-mongoose").ConvertObject<{
                        action: string | null | undefined;
                        percentage: number | null | undefined;
                        delay: number | null | undefined;
                        associatedRole: string | null | undefined;
                    }> | null | undefined;
                    label: string | null | undefined;
                }>[] | null | undefined;
            }> | null | undefined;
        }> | null | undefined;
        samples: import("ts-mongoose").ConvertObject<{
            quantity: number | null | undefined;
            trackingCode: string | null | undefined;
            isUrgent: boolean | null | undefined;
            isUrgentContact: string | null | undefined;
            isUrgentReason: string | null | undefined;
            analysisStartTime: Date | null | undefined;
            analysisEndTime: Date | null | undefined;
            qaStartTime: Date | null | undefined;
            qaEndTime: Date | null | undefined;
            qaAction: "Urgent Attention Required" | "Repair/Encapsulate" | "Action Required" | "Removal Recommended" | "Material to be managed as asbestos" | "No asbestos detected" | "No suspect material identified";
            qaIssues: boolean | null | undefined;
            qaIssueType: "Lab Issues" | "Surveyor Issues" | "Admin Issues" | "Other";
            teamsReport: string | null | undefined;
        }> | null | undefined;
        files: import("ts-mongoose").ConvertObject<{
            fileId: string;
            fileName: string;
            fileUrl: string;
            hideFromEngineer: boolean;
        }>[] | null | undefined;
        reportFileIds: string[] | null | undefined;
        reportDraftGenerated: boolean | null | undefined;
        riskAssessments: string[] | null | undefined;
        tags: string[] | null | undefined;
        createdBy: string;
        createdAt: Date;
    }>;
    options: import("mongoose").SchemaOptions;
};
export declare const Job: import("mongoose").Model<import("mongoose").Document & {
    title: string;
    _id: {
        of<T>(schema: T): import("ts-mongoose").ConvertObject<T> | null | undefined;
    };
    reference: number;
    clientId: string;
    createdAt: Date;
    clientName: string;
    status: "Not Booked" | "Booked" | "Finished";
    createdBy: string;
    site: import("ts-mongoose").ConvertObject<{
        _id: string | null | undefined;
        clientId: string | null | undefined;
        autoGenerated: boolean | null | undefined;
        title: string | null | undefined;
        UPRN: string;
        UPRNLabel: string;
        postcode: string;
        addressLine1: string;
        city: string;
        county: string;
        mandatoryInduction: boolean;
        createdAt: Date | null | undefined;
        teamsId: string | null | undefined;
    }>;
    batchId: string;
    batchName: string;
    projectId: string;
    projectName: string;
    isOnHold: boolean;
    contact: import("ts-mongoose").ConvertObject<{
        name: string | null | undefined;
        phone: string | null | undefined;
        mobile: string | null | undefined;
        alternative: string | null | undefined;
        email: string | null | undefined;
    }>;
    twoMen: boolean;
    sendReport: boolean;
    work: import("ts-mongoose").ConvertObject<{
        likelihood: "Certain/Guaranteed" | "Likely" | "Possible" | "Unlikely";
        nextAvailableSlot: boolean | null | undefined;
        start: Date | null | undefined;
        end: Date | null | undefined;
        assignedOperatives: number | null | undefined;
        preferredStaff: string[] | null | undefined;
        staffArray: {
            of<T>(schema: T): import("ts-mongoose").ConvertObject<T>;
        }[] | null | undefined;
        tlProjectManager: string | null | undefined;
        tlAdminContact: string | null | undefined;
        clientProjectManager: string | null | undefined;
        clientSiteContact: string | null | undefined;
        projectManagerTel: string | null | undefined;
        siteContactTel: string | null | undefined;
        notes: string | null | undefined;
        workType: import("ts-mongoose").ConvertObject<{
            TLtype: string;
            quoteRate: number;
            quantity: number;
            requirements: import("ts-mongoose").ConvertObject<{
                reqId: string;
                quantity: number;
                clientCost: number;
                externalCost: number;
            }>[] | null | undefined;
            elements: string[] | null | undefined;
        }>;
        completed: boolean;
    }>;
} & {
    requirements?: import("ts-mongoose").ConvertObject<{
        reqId: string;
        quantity: number;
        clientCost: number;
        externalCost: number;
    }>[] | null | undefined;
    riskAssessments?: string[] | null | undefined;
    notes?: string | null | undefined;
    files?: import("ts-mongoose").ConvertObject<{
        fileId: string;
        fileName: string;
        fileUrl: string;
        hideFromEngineer: boolean;
    }>[] | null | undefined;
    tags?: string[] | null | undefined;
    onHoldReason?: string | null | undefined;
    onHoldDetails?: string | null | undefined;
    onHoldDate?: Date | null | undefined;
    lowerLimit?: Date | null | undefined;
    higherLimit?: Date | null | undefined;
    deletionRequestedBy?: string | null | undefined;
    engineerNote?: string | null | undefined;
    purchaseOrder?: string | null | undefined;
    failure?: import("ts-mongoose").ConvertObject<{
        reason: "No Answer" | "Call Rejected By Contact" | "Wrong Number" | "Contact Unavailable" | "Callback Requested";
        notes: string | null | undefined;
    }> | null | undefined;
    workflow?: import("ts-mongoose").ConvertObject<{
        presite: import("ts-mongoose").ConvertObject<{
            numberOfDays: number | null | undefined;
            steps: undefined[] | null[] | import("ts-mongoose").ConvertObject<{
                type: import("ts-mongoose").ConvertObject<{
                    action: string | null | undefined;
                    percentage: number | null | undefined;
                    delay: number | null | undefined;
                    associatedRole: string | null | undefined;
                }> | null | undefined;
                label: string | null | undefined;
            }>[] | null | undefined;
        }> | null | undefined;
        site: import("ts-mongoose").ConvertObject<{
            numberOfDays: number | null | undefined;
            steps: undefined[] | null[] | import("ts-mongoose").ConvertObject<{
                type: import("ts-mongoose").ConvertObject<{
                    action: string | null | undefined;
                    percentage: number | null | undefined;
                    delay: number | null | undefined;
                    associatedRole: string | null | undefined;
                }> | null | undefined;
                label: string | null | undefined;
            }>[] | null | undefined;
        }> | null | undefined;
        postsite: import("ts-mongoose").ConvertObject<{
            numberOfDays: number | null | undefined;
            steps: undefined[] | null[] | import("ts-mongoose").ConvertObject<{
                type: import("ts-mongoose").ConvertObject<{
                    action: string | null | undefined;
                    percentage: number | null | undefined;
                    delay: number | null | undefined;
                    associatedRole: string | null | undefined;
                }> | null | undefined;
                label: string | null | undefined;
            }>[] | null | undefined;
        }> | null | undefined;
    }> | null | undefined;
    samples?: import("ts-mongoose").ConvertObject<{
        quantity: number | null | undefined;
        trackingCode: string | null | undefined;
        isUrgent: boolean | null | undefined;
        isUrgentContact: string | null | undefined;
        isUrgentReason: string | null | undefined;
        analysisStartTime: Date | null | undefined;
        analysisEndTime: Date | null | undefined;
        qaStartTime: Date | null | undefined;
        qaEndTime: Date | null | undefined;
        qaAction: "Urgent Attention Required" | "Repair/Encapsulate" | "Action Required" | "Removal Recommended" | "Material to be managed as asbestos" | "No asbestos detected" | "No suspect material identified";
        qaIssues: boolean | null | undefined;
        qaIssueType: "Lab Issues" | "Surveyor Issues" | "Admin Issues" | "Other";
        teamsReport: string | null | undefined;
    }> | null | undefined;
    reportFileIds?: string[] | null | undefined;
    reportDraftGenerated?: boolean | null | undefined;
}, {}>;
export declare type IJob = ExtractProps<typeof JobSchema>;
export {};
