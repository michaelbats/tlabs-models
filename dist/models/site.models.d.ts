/// <reference types="mongoose" />
import { ExtractProps } from 'ts-mongoose';
export declare const SiteObject: {
    _id: string | null | undefined;
    clientId: string | null | undefined;
    autoGenerated: boolean | null | undefined;
    title: string | null | undefined;
    UPRN: string;
    UPRNLabel: string;
    postcode: string;
    addressLine1: string;
    city: string;
    county: string;
    mandatoryInduction: boolean;
    createdAt: Date | null | undefined;
    teamsId: string | null | undefined;
};
declare const SiteSchema: import("mongoose").Schema<any> & {
    definition: import("ts-mongoose").ConvertObject<{
        _id: string | null | undefined;
        clientId: string | null | undefined;
        autoGenerated: boolean | null | undefined;
        title: string | null | undefined;
        UPRN: string;
        UPRNLabel: string;
        postcode: string;
        addressLine1: string;
        city: string;
        county: string;
        mandatoryInduction: boolean;
        createdAt: Date | null | undefined;
        teamsId: string | null | undefined;
    }>;
    options: import("mongoose").SchemaOptions;
};
export declare const Site: import("mongoose").Model<import("mongoose").Document & {
    UPRN: string;
    UPRNLabel: string;
    postcode: string;
    addressLine1: string;
    city: string;
    county: string;
    mandatoryInduction: boolean;
} & {
    title?: string | null | undefined;
    _id?: string | null | undefined;
    clientId?: string | null | undefined;
    autoGenerated?: boolean | null | undefined;
    createdAt?: Date | null | undefined;
    teamsId?: string | null | undefined;
}, {}>;
export declare type ISite = ExtractProps<typeof SiteSchema>;
export {};
